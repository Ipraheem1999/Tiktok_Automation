"""
ูุญุฏุฉ ุงูุชูุงุนู ูุน ุชูู ุชูู
ุชููุฑ ูุธุงุฆู ููุชูุงุนู ูุน ุงููุญุชูู ุนูู ุชูู ุชูู (ุงูุฅุนุฌุงุจุ ุงูุชุนูููุ ุงููุดุงุฑูุฉุ ุงูุญูุธ)
"""

import os
import time
import random
import logging
import json
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, NoSuchElementException, ElementNotInteractableException

class TikTokEngagement:
    """ูููู ุงูุชูุงุนู ูุน ุชูู ุชูู"""
    
    def __init__(self, driver=None):
        """
        ุชููุฆุฉ ูููู ุงูุชูุงุนู
        
        ุงููุนููุงุช:
            driver (webdriver, optional): ูุชุตูุญ Selenium
        """
        self.driver = driver
        
        # ุฅุนุฏุงุฏ ุงูุณุฌู
        self.logger = logging.getLogger('tiktok_engagement')
        self.logger.setLevel(logging.INFO)
        
        # ุฅุถุงูุฉ ูุนุงูุฌ ููุณุฌู
        log_dir = os.path.join(os.path.dirname(os.path.dirname(os.path.dirname(__file__))), 'logs')
        os.makedirs(log_dir, exist_ok=True)
        
        log_file = os.path.join(log_dir, 'engagement.log')
        file_handler = logging.FileHandler(log_file)
        file_handler.setLevel(logging.INFO)
        
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        file_handler.setFormatter(formatter)
        
        self.logger.addHandler(file_handler)
        
        # ุชุญููู ุงูุชุนูููุงุช ุงูุนุดูุงุฆูุฉ
        self.comments_file = os.path.join(os.path.dirname(os.path.dirname(os.path.dirname(__file__))), 'config', 'comments.json')
        self._load_comments()
    
    def _load_comments(self):
        """ุชุญููู ุงูุชุนูููุงุช ุงูุนุดูุงุฆูุฉ"""
        if not os.path.exists(self.comments_file):
            # ุฅูุดุงุก ููู ุงูุชุนูููุงุช ุงูุนุดูุงุฆูุฉ
            comments = {
                "general": [
                    "ุฑุงุฆุน! ๐",
                    "ุฃุญุจ ูุฐุง ุงููุญุชูู ๐",
                    "ูุญุชูู ูููุฒ ๐ฅ",
                    "ุงุณุชูุฑ ูู ุงููุดุฑ ๐",
                    "ุฃุนุฌุจูู ูุซูุฑูุง โค๏ธ",
                    "ูุญุชูู ุฑุงุฆุน ูุงูุนุงุฏุฉ",
                    "ุดูุฑูุง ุนูู ุงููุดุงุฑูุฉ",
                    "ุชุณุชุญู ุงููุชุงุจุนุฉ ๐",
                    "ูู ุฃูุถู ูุง ุฑุฃูุช ุงูููู",
                    "ุฃุจุฏุนุช! ๐"
                ],
                "funny": [
                    "ูููููู ๐",
                    "ุฃุถุญูุชูู ูุซูุฑูุง ๐คฃ",
                    "ูู ุฃุถุญู ููุฐุง ููุฐ ูุชุฑุฉ ุทูููุฉ",
                    "ููุชุฉ ุฑุงุฆุนุฉ ๐",
                    "ุงุณุชูุฑ ูู ูุดุฑ ุงููุญุชูู ุงููุถุญู"
                ],
                "food": [
                    "ูุจุฏู ูุฐูุฐูุง ุฌุฏูุง ๐",
                    "ุฃุฑูุฏ ุชุฌุฑุจุฉ ูุฐู ุงููุตูุฉ",
                    "ุดููุชูู ููุทุนุงู ๐",
                    "ูุตูุฉ ุฑุงุฆุนุฉ ุณุฃุฌุฑุจูุง",
                    "ุทุนุงู ููุชุญ ุงูููุณ ๐จโ๐ณ"
                ],
                "travel": [
                    "ููุงู ุฌููู ุฌุฏูุง ๐๏ธ",
                    "ุฃุชููู ุฒูุงุฑุฉ ูุฐุง ุงูููุงู",
                    "ุตูุฑ ุฑุงุฆุนุฉ ููุณูุฑ โ๏ธ",
                    "ุฃูู ูุฐุง ุงูููุงู ุงูุฌูููุ",
                    "ุฃุถูุช ูุฐุง ุงูููุงู ููุงุฆูุฉ ุฃูุงูู ุงูุณูุฑ ุงูุฎุงุตุฉ ุจู"
                ],
                "music": [
                    "ุฃุบููุฉ ุฑุงุฆุนุฉ ๐ต",
                    "ุตูุช ุฌููู ุฌุฏูุง ๐ค",
                    "ุฃุญุจ ูุฐู ุงูุฃุบููุฉ",
                    "ููุณููู ุชุฑูุญ ุงูุฃุนุตุงุจ ๐ถ",
                    "ุฃุฏุงุก ูููุฒ"
                ],
                "dance": [
                    "ุฑูุตุฉ ุฑุงุฆุนุฉ ๐",
                    "ุญุฑูุงุช ูููุฒุฉ",
                    "ุฃุฏุงุก ุงุญุชุฑุงูู ูู ุงูุฑูุต",
                    "ุฑูุตุฉ ุฌูููุฉ ุฌุฏูุง ๐บ",
                    "ุฃุนุฌุจุชูู ุงูููุฑููุบุฑุงููุง"
                ]
            }
            
            with open(self.comments_file, 'w', encoding='utf-8') as f:
                json.dump(comments, f, ensure_ascii=False, indent=2)
            
            self.comments = comments
        else:
            with open(self.comments_file, 'r', encoding='utf-8') as f:
                self.comments = json.load(f)
    
    def set_driver(self, driver):
        """
        ุชุนููู ูุชุตูุญ Selenium
        
        ุงููุนููุงุช:
            driver (webdriver): ูุชุตูุญ Selenium
        """
        self.driver = driver
    
    def _wait_and_find_element(self, by, value, timeout=10):
        """
        ุงูุชุธุงุฑ ูุฅูุฌุงุฏ ุนูุตุฑ
        
        ุงููุนููุงุช:
            by (By): ุทุฑููุฉ ุงูุจุญุซ
            value (str): ูููุฉ ุงูุจุญุซ
            timeout (int, optional): ูููุฉ ุงูุงูุชุธุงุฑ ุจุงูุซูุงูู
            
        ุงูุนูุงุฆุฏ:
            WebElement: ุงูุนูุตุฑ ุฃู None ุฅุฐุง ูู ูุชู ุงูุนุซูุฑ ุนูู ุงูุนูุตุฑ
        """
        try:
            element = WebDriverWait(self.driver, timeout).until(
                EC.presence_of_element_located((by, value))
            )
            return element
        except TimeoutException:
            self.logger.warning(f"ูู ูุชู ุงูุนุซูุฑ ุนูู ุงูุนูุตุฑ: {by}={value}")
            return None
    
    def _wait_and_find_elements(self, by, value, timeout=10):
        """
        ุงูุชุธุงุฑ ูุฅูุฌุงุฏ ุนูุงุตุฑ
        
        ุงููุนููุงุช:
            by (By): ุทุฑููุฉ ุงูุจุญุซ
            value (str): ูููุฉ ุงูุจุญุซ
            timeout (int, optional): ูููุฉ ุงูุงูุชุธุงุฑ ุจุงูุซูุงูู
            
        ุงูุนูุงุฆุฏ:
            list: ูุงุฆูุฉ ุงูุนูุงุตุฑ ุฃู ูุงุฆูุฉ ูุงุฑุบุฉ ุฅุฐุง ูู ูุชู ุงูุนุซูุฑ ุนูู ุนูุงุตุฑ
        """
        try:
            elements = WebDriverWait(self.driver, timeout).until(
                EC.presence_of_all_elements_located((by, value))
            )
            return elements
        except TimeoutException:
            self.logger.warning(f"ูู ูุชู ุงูุนุซูุฑ ุนูู ุนูุงุตุฑ: {by}={value}")
            return []
    
    def _random_wait(self, min_seconds=1, max_seconds=3):
        """
        ุงูุชุธุงุฑ ุนุดูุงุฆู
        
        ุงููุนููุงุช:
            min_seconds (float, optional): ุงูุญุฏ ุงูุฃุฏูู ููุงูุชุธุงุฑ ุจุงูุซูุงูู
            max_seconds (float, optional): ุงูุญุฏ ุงูุฃูุตู ููุงูุชุธุงุฑ ุจุงูุซูุงูู
        """
        time.sleep(random.uniform(min_seconds, max_seconds))
    
    def like_video(self, video_url=None):
        """
        ุงูุฅุนุฌุงุจ ุจููุฏูู
        
        ุงููุนููุงุช:
            video_url (str, optional): ุฑุงุจุท ุงูููุฏูู. ุฅุฐุง ูุงู Noneุ ุณูุชู ุงุณุชุฎุฏุงู ุงูุตูุญุฉ ุงูุญุงููุฉ
            
        ุงูุนูุงุฆุฏ:
            bool: True ุฅุฐุง ุชู ุงูุฅุนุฌุงุจ ุจูุฌุงุญุ False ุฎูุงู ุฐูู
        """
        if not self.driver:
            self.logger.error("ูู ูุชู ุชุนููู ูุชุตูุญ Selenium")
            return False
        
        try:
            # ุงูุงูุชูุงู ุฅูู ุตูุญุฉ ุงูููุฏูู ุฅุฐุง ุชู ุชุญุฏูุฏ ุฑุงุจุท
            if video_url:
                self.driver.get(video_url)
                self._random_wait(3, 5)
            
            # ุงูุจุญุซ ุนู ุฒุฑ ุงูุฅุนุฌุงุจ
            like_button = None
            
            # ูุญุงููุฉ ุงูุนุซูุฑ ุนูู ุฒุฑ ุงูุฅุนุฌุงุจ ุจุงุณุชุฎุฏุงู ุนุฏุฉ ุทุฑู
            selectors = [
                (By.XPATH, "//span[contains(@data-e2e, 'like-icon')]"),
                (By.XPATH, "//button[contains(@data-e2e, 'like-icon')]"),
                (By.XPATH, "//span[contains(@class, 'like-icon')]"),
                (By.XPATH, "//div[contains(@class, 'like-icon')]")
            ]
            
            for by, selector in selectors:
                like_button = self._wait_and_find_element(by, selector)
                if like_button:
                    break
            
            if not like_button:
                self.logger.error("ูู ูุชู ุงูุนุซูุฑ ุนูู ุฒุฑ ุงูุฅุนุฌุงุจ")
                return False
            
            # ุงูุชุญูู ููุง ุฅุฐุง ูุงู ุชู ุงูุฅุนุฌุงุจ ุจุงููุนู
            is_liked = "active" in like_button.get_attribute("class") or "filled" in like_button.get_attribute("class")
            
            if is_liked:
                self.logger.info("ุชู ุงูุฅุนุฌุงุจ ุจุงูููุฏูู ุจุงููุนู")
                return True
            
            # ุงูููุฑ ุนูู ุฒุฑ ุงูุฅุนุฌุงุจ
            like_button.click()
            self._random_wait()
            
            self.logger.info("ุชู ุงูุฅุนุฌุงุจ ุจุงูููุฏูู ุจูุฌุงุญ")
            return True
        except Exception as e:
            self.logger.error(f"ุฎุทุฃ ูู ุงูุฅุนุฌุงุจ ุจุงูููุฏูู: {str(e)}")
            return False
    
    def unlike_video(self, video_url=None):
        """
        ุฅูุบุงุก ุงูุฅุนุฌุงุจ ุจููุฏูู
        
        ุงููุนููุงุช:
            video_url (str, optional): ุฑุงุจุท ุงูููุฏูู. ุฅุฐุง ูุงู Noneุ ุณูุชู ุงุณุชุฎุฏุงู ุงูุตูุญุฉ ุงูุญุงููุฉ
            
        ุงูุนูุงุฆุฏ:
            bool: True ุฅุฐุง ุชู ุฅูุบุงุก ุงูุฅุนุฌุงุจ ุจูุฌุงุญุ False ุฎูุงู ุฐูู
        """
        if not self.driver:
            self.logger.error("ูู ูุชู ุชุนููู ูุชุตูุญ Selenium")
            return False
        
        try:
            # ุงูุงูุชูุงู ุฅูู ุตูุญุฉ ุงูููุฏูู ุฅุฐุง ุชู ุชุญุฏูุฏ ุฑุงุจุท
            if video_url:
                self.driver.get(video_url)
                self._random_wait(3, 5)
            
            # ุงูุจุญุซ ุนู ุฒุฑ ุงูุฅุนุฌุงุจ
            like_button = None
            
            # ูุญุงููุฉ ุงูุนุซูุฑ ุนูู ุฒุฑ ุงูุฅุนุฌุงุจ ุจุงุณุชุฎุฏุงู ุนุฏุฉ ุทุฑู
            selectors = [
                (By.XPATH, "//span[contains(@data-e2e, 'like-icon')]"),
                (By.XPATH, "//button[contains(@data-e2e, 'like-icon')]"),
                (By.XPATH, "//span[contains(@class, 'like-icon')]"),
                (By.XPATH, "//div[contains(@class, 'like-icon')]")
            ]
            
            for by, selector in selectors:
                like_button = self._wait_and_find_element(by, selector)
                if like_button:
                    break
            
            if not like_button:
                self.logger.error("ูู ูุชู ุงูุนุซูุฑ ุนูู ุฒุฑ ุงูุฅุนุฌุงุจ")
                return False
            
            # ุงูุชุญูู ููุง ุฅุฐุง ูุงู ุชู ุงูุฅุนุฌุงุจ ุจุงููุนู
            is_liked = "active" in like_button.get_attribute("class") or "filled" in like_button.get_attribute("class")
            
            if not is_liked:
                self.logger.info("ูู ูุชู ุงูุฅุนุฌุงุจ ุจุงูููุฏูู ุจุงููุนู")
                return True
            
            # ุงูููุฑ ุนูู ุฒุฑ ุงูุฅุนุฌุงุจ ูุฅูุบุงุก ุงูุฅุนุฌุงุจ
            like_button.click()
            self._random_wait()
            
            self.logger.info("ุชู ุฅูุบุงุก ุงูุฅุนุฌุงุจ ุจุงูููุฏูู ุจูุฌุงุญ")
            return True
        except Exception as e:
            self.logger.error(f"ุฎุทุฃ ูู ุฅูุบุงุก ุงูุฅุนุฌุงุจ ุจุงูููุฏูู: {str(e)}")
            return False
    
    def comment_on_video(self, comment=None, video_url=None, category=None):
        """
        ุงูุชุนููู ุนูู ููุฏูู
        
        ุงููุนููุงุช:
            comment (str, optional): ูุต ุงูุชุนููู. ุฅุฐุง ูุงู Noneุ ุณูุชู ุงุณุชุฎุฏุงู ุชุนููู ุนุดูุงุฆู
            video_url (str, optional): ุฑุงุจุท ุงูููุฏูู. ุฅุฐุง ูุงู Noneุ ุณูุชู ุงุณุชุฎุฏุงู ุงูุตูุญุฉ ุงูุญุงููุฉ
            category (str, optional): ูุฆุฉ ุงูุชุนููู ุงูุนุดูุงุฆู
            
        ุงูุนูุงุฆุฏ:
            bool: True ุฅุฐุง ุชู ุงูุชุนููู ุจูุฌุงุญุ False ุฎูุงู ุฐูู
        """
        if not self.driver:
            self.logger.error("ูู ูุชู ุชุนููู ูุชุตูุญ Selenium")
            return False
        
        try:
            # ุงูุงูุชูุงู ุฅูู ุตูุญุฉ ุงูููุฏูู ุฅุฐุง ุชู ุชุญุฏูุฏ ุฑุงุจุท
            if video_url:
                self.driver.get(video_url)
                self._random_wait(3, 5)
            
            # ุงุฎุชูุงุฑ ุชุนููู ุนุดูุงุฆู ุฅุฐุง ูู ูุชู ุชุญุฏูุฏ ุชุนููู
            if not comment:
                if category and category in self.comments:
                    comment = random.choice(self.comments[category])
                else:
                    comment = random.choice(self.comments["general"])
            
            # ุงูุจุญุซ ุนู ุฒุฑ ุงูุชุนููู
            comment_button = None
            
            # ูุญุงููุฉ ุงูุนุซูุฑ ุนูู ุฒุฑ ุงูุชุนููู ุจุงุณุชุฎุฏุงู ุนุฏุฉ ุทุฑู
            selectors = [
                (By.XPATH, "//span[contains(@data-e2e, 'comment-icon')]"),
                (By.XPATH, "//button[contains(@data-e2e, 'comment-icon')]"),
                (By.XPATH, "//span[contains(@class, 'comment-icon')]"),
                (By.XPATH, "//div[contains(@class, 'comment-icon')]")
            ]
            
            for by, selector in selectors:
                comment_button = self._wait_and_find_element(by, selector)
                if comment_button:
                    break
            
            if not comment_button:
                self.logger.error("ูู ูุชู ุงูุนุซูุฑ ุนูู ุฒุฑ ุงูุชุนููู")
                return False
            
            # ุงูููุฑ ุนูู ุฒุฑ ุงูุชุนููู
            comment_button.click()
            self._random_wait()
            
            # ุงูุจุญุซ ุนู ุญูู ุงูุชุนููู
            comment_input = None
            
            # ูุญุงููุฉ ุงูุนุซูุฑ ุนูู ุญูู ุงูุชุนููู ุจุงุณุชุฎุฏุงู ุนุฏุฉ ุทุฑู
            selectors = [
                (By.XPATH, "//div[contains(@data-e2e, 'comment-input')]"),
                (By.XPATH, "//div[contains(@class, 'comment-input')]"),
                (By.XPATH, "//div[contains(@placeholder, 'Add comment')]"),
                (By.XPATH, "//div[contains(@contenteditable, 'true')]")
            ]
            
            for by, selector in selectors:
                comment_input = self._wait_and_find_element(by, selector)
                if comment_input:
                    break
            
            if not comment_input:
                self.logger.error("ูู ูุชู ุงูุนุซูุฑ ุนูู ุญูู ุงูุชุนููู")
                return False
            
            # ุฅุฏุฎุงู ุงูุชุนููู
            comment_input.clear()
            
            # ุฅุฏุฎุงู ุงูุชุนููู ุญุฑููุง ุจุญุฑู
            for char in comment:
                comment_input.send_keys(char)
                self._random_wait(0.05, 0.15)
            
            self._random_wait()
            
            # ุงูุจุญุซ ุนู ุฒุฑ ุงููุดุฑ
            post_button = None
            
            # ูุญุงููุฉ ุงูุนุซูุฑ ุนูู ุฒุฑ ุงููุดุฑ ุจุงุณุชุฎุฏุงู ุนุฏุฉ ุทุฑู
            selectors = [
                (By.XPATH, "//button[contains(text(), 'Post')]"),
                (By.XPATH, "//button[contains(@data-e2e, 'comment-post')]"),
                (By.XPATH, "//button[contains(@class, 'post-button')]")
            ]
            
            for by, selector in selectors:
                post_button = self._wait_and_find_element(by, selector)
                if post_button:
                    break
            
            if not post_button:
                self.logger.error("ูู ูุชู ุงูุนุซูุฑ ุนูู ุฒุฑ ุงููุดุฑ")
                return False
            
            # ุงูููุฑ ุนูู ุฒุฑ ุงููุดุฑ
            post_button.click()
            self._random_wait(2, 4)
            
            self.logger.info(f"ุชู ุงูุชุนููู ุนูู ุงูููุฏูู ุจูุฌุงุญ: {comment}")
            return True
        except Exception as e:
            self.logger.error(f"ุฎุทุฃ ูู ุงูุชุนููู ุนูู ุงูููุฏูู: {str(e)}")
            return False
    
    def share_video(self, video_url=None, share_type="copy_link"):
        """
        ูุดุงุฑูุฉ ููุฏูู
        
        ุงููุนููุงุช:
            video_url (str, optional): ุฑุงุจุท ุงูููุฏูู. ุฅุฐุง ูุงู Noneุ ุณูุชู ุงุณุชุฎุฏุงู ุงูุตูุญุฉ ุงูุญุงููุฉ
            share_type (str, optional): ููุน ุงููุดุงุฑูุฉ (copy_link, facebook, twitter, whatsapp, telegram)
            
        ุงูุนูุงุฆุฏ:
            bool: True ุฅุฐุง ุชูุช ุงููุดุงุฑูุฉ ุจูุฌุงุญุ False ุฎูุงู ุฐูู
        """
        if not self.driver:
            self.logger.error("ูู ูุชู ุชุนููู ูุชุตูุญ Selenium")
            return False
        
        try:
            # ุงูุงูุชูุงู ุฅูู ุตูุญุฉ ุงูููุฏูู ุฅุฐุง ุชู ุชุญุฏูุฏ ุฑุงุจุท
            if video_url:
                self.driver.get(video_url)
                self._random_wait(3, 5)
            
            # ุงูุจุญุซ ุนู ุฒุฑ ุงููุดุงุฑูุฉ
            share_button = None
            
            # ูุญุงููุฉ ุงูุนุซูุฑ ุนูู ุฒุฑ ุงููุดุงุฑูุฉ ุจุงุณุชุฎุฏุงู ุนุฏุฉ ุทุฑู
            selectors = [
                (By.XPATH, "//span[contains(@data-e2e, 'share-icon')]"),
                (By.XPATH, "//button[contains(@data-e2e, 'share-icon')]"),
                (By.XPATH, "//span[contains(@class, 'share-icon')]"),
                (By.XPATH, "//div[contains(@class, 'share-icon')]")
            ]
            
            for by, selector in selectors:
                share_button = self._wait_and_find_element(by, selector)
                if share_button:
                    break
            
            if not share_button:
                self.logger.error("ูู ูุชู ุงูุนุซูุฑ ุนูู ุฒุฑ ุงููุดุงุฑูุฉ")
                return False
            
            # ุงูููุฑ ุนูู ุฒุฑ ุงููุดุงุฑูุฉ
            share_button.click()
            self._random_wait()
            
            # ุงุฎุชูุงุฑ ููุน ุงููุดุงุฑูุฉ
            share_option = None
            
            if share_type == "copy_link":
                # ุงูุจุญุซ ุนู ุฎูุงุฑ ูุณุฎ ุงูุฑุงุจุท
                selectors = [
                    (By.XPATH, "//div[contains(text(), 'Copy link')]"),
                    (By.XPATH, "//span[contains(text(), 'Copy link')]")
                ]
            elif share_type == "facebook":
                # ุงูุจุญุซ ุนู ุฎูุงุฑ ูุดุงุฑูุฉ ุนูู ููุณุจูู
                selectors = [
                    (By.XPATH, "//div[contains(text(), 'Facebook')]"),
                    (By.XPATH, "//span[contains(text(), 'Facebook')]")
                ]
            elif share_type == "twitter":
                # ุงูุจุญุซ ุนู ุฎูุงุฑ ูุดุงุฑูุฉ ุนูู ุชููุชุฑ
                selectors = [
                    (By.XPATH, "//div[contains(text(), 'Twitter')]"),
                    (By.XPATH, "//span[contains(text(), 'Twitter')]")
                ]
            elif share_type == "whatsapp":
                # ุงูุจุญุซ ุนู ุฎูุงุฑ ูุดุงุฑูุฉ ุนูู ูุงุชุณุงุจ
                selectors = [
                    (By.XPATH, "//div[contains(text(), 'WhatsApp')]"),
                    (By.XPATH, "//span[contains(text(), 'WhatsApp')]")
                ]
            elif share_type == "telegram":
                # ุงูุจุญุซ ุนู ุฎูุงุฑ ูุดุงุฑูุฉ ุนูู ุชูููุฌุฑุงู
                selectors = [
                    (By.XPATH, "//div[contains(text(), 'Telegram')]"),
                    (By.XPATH, "//span[contains(text(), 'Telegram')]")
                ]
            else:
                # ุงูุจุญุซ ุนู ุฎูุงุฑ ูุณุฎ ุงูุฑุงุจุท ูุฎูุงุฑ ุงูุชุฑุงุถู
                selectors = [
                    (By.XPATH, "//div[contains(text(), 'Copy link')]"),
                    (By.XPATH, "//span[contains(text(), 'Copy link')]")
                ]
            
            for by, selector in selectors:
                share_option = self._wait_and_find_element(by, selector)
                if share_option:
                    break
            
            if not share_option:
                self.logger.error(f"ูู ูุชู ุงูุนุซูุฑ ุนูู ุฎูุงุฑ ุงููุดุงุฑูุฉ: {share_type}")
                return False
            
            # ุงูููุฑ ุนูู ุฎูุงุฑ ุงููุดุงุฑูุฉ
            share_option.click()
            self._random_wait(2, 4)
            
            self.logger.info(f"ุชูุช ูุดุงุฑูุฉ ุงูููุฏูู ุจูุฌุงุญ: {share_type}")
            return True
        except Exception as e:
            self.logger.error(f"ุฎุทุฃ ูู ูุดุงุฑูุฉ ุงูููุฏูู: {str(e)}")
            return False
    
    def save_video(self, video_url=None):
        """
        ุญูุธ ููุฏูู
        
        ุงููุนููุงุช:
            video_url (str, optional): ุฑุงุจุท ุงูููุฏูู. ุฅุฐุง ูุงู Noneุ ุณูุชู ุงุณุชุฎุฏุงู ุงูุตูุญุฉ ุงูุญุงููุฉ
            
        ุงูุนูุงุฆุฏ:
            bool: True ุฅุฐุง ุชู ุงูุญูุธ ุจูุฌุงุญุ False ุฎูุงู ุฐูู
        """
        if not self.driver:
            self.logger.error("ูู ูุชู ุชุนููู ูุชุตูุญ Selenium")
            return False
        
        try:
            # ุงูุงูุชูุงู ุฅูู ุตูุญุฉ ุงูููุฏูู ุฅุฐุง ุชู ุชุญุฏูุฏ ุฑุงุจุท
            if video_url:
                self.driver.get(video_url)
                self._random_wait(3, 5)
            
            # ุงูุจุญุซ ุนู ุฒุฑ ุงูุญูุธ
            save_button = None
            
            # ูุญุงููุฉ ุงูุนุซูุฑ ุนูู ุฒุฑ ุงูุญูุธ ุจุงุณุชุฎุฏุงู ุนุฏุฉ ุทุฑู
            selectors = [
                (By.XPATH, "//span[contains(@data-e2e, 'save-icon')]"),
                (By.XPATH, "//button[contains(@data-e2e, 'save-icon')]"),
                (By.XPATH, "//span[contains(@class, 'save-icon')]"),
                (By.XPATH, "//div[contains(@class, 'save-icon')]"),
                (By.XPATH, "//span[contains(@data-e2e, 'bookmark-icon')]"),
                (By.XPATH, "//button[contains(@data-e2e, 'bookmark-icon')]")
            ]
            
            for by, selector in selectors:
                save_button = self._wait_and_find_element(by, selector)
                if save_button:
                    break
            
            if not save_button:
                self.logger.error("ูู ูุชู ุงูุนุซูุฑ ุนูู ุฒุฑ ุงูุญูุธ")
                return False
            
            # ุงูุชุญูู ููุง ุฅุฐุง ูุงู ุชู ุงูุญูุธ ุจุงููุนู
            is_saved = "active" in save_button.get_attribute("class") or "filled" in save_button.get_attribute("class")
            
            if is_saved:
                self.logger.info("ุชู ุญูุธ ุงูููุฏูู ุจุงููุนู")
                return True
            
            # ุงูููุฑ ุนูู ุฒุฑ ุงูุญูุธ
            save_button.click()
            self._random_wait()
            
            self.logger.info("ุชู ุญูุธ ุงูููุฏูู ุจูุฌุงุญ")
            return True
        except Exception as e:
            self.logger.error(f"ุฎุทุฃ ูู ุญูุธ ุงูููุฏูู: {str(e)}")
            return False
    
    def unsave_video(self, video_url=None):
        """
        ุฅูุบุงุก ุญูุธ ููุฏูู
        
        ุงููุนููุงุช:
            video_url (str, optional): ุฑุงุจุท ุงูููุฏูู. ุฅุฐุง ูุงู Noneุ ุณูุชู ุงุณุชุฎุฏุงู ุงูุตูุญุฉ ุงูุญุงููุฉ
            
        ุงูุนูุงุฆุฏ:
            bool: True ุฅุฐุง ุชู ุฅูุบุงุก ุงูุญูุธ ุจูุฌุงุญุ False ุฎูุงู ุฐูู
        """
        if not self.driver:
            self.logger.error("ูู ูุชู ุชุนููู ูุชุตูุญ Selenium")
            return False
        
        try:
            # ุงูุงูุชูุงู ุฅูู ุตูุญุฉ ุงูููุฏูู ุฅุฐุง ุชู ุชุญุฏูุฏ ุฑุงุจุท
            if video_url:
                self.driver.get(video_url)
                self._random_wait(3, 5)
            
            # ุงูุจุญุซ ุนู ุฒุฑ ุงูุญูุธ
            save_button = None
            
            # ูุญุงููุฉ ุงูุนุซูุฑ ุนูู ุฒุฑ ุงูุญูุธ ุจุงุณุชุฎุฏุงู ุนุฏุฉ ุทุฑู
            selectors = [
                (By.XPATH, "//span[contains(@data-e2e, 'save-icon')]"),
                (By.XPATH, "//button[contains(@data-e2e, 'save-icon')]"),
                (By.XPATH, "//span[contains(@class, 'save-icon')]"),
                (By.XPATH, "//div[contains(@class, 'save-icon')]"),
                (By.XPATH, "//span[contains(@data-e2e, 'bookmark-icon')]"),
                (By.XPATH, "//button[contains(@data-e2e, 'bookmark-icon')]")
            ]
            
            for by, selector in selectors:
                save_button = self._wait_and_find_element(by, selector)
                if save_button:
                    break
            
            if not save_button:
                self.logger.error("ูู ูุชู ุงูุนุซูุฑ ุนูู ุฒุฑ ุงูุญูุธ")
                return False
            
            # ุงูุชุญูู ููุง ุฅุฐุง ูุงู ุชู ุงูุญูุธ ุจุงููุนู
            is_saved = "active" in save_button.get_attribute("class") or "filled" in save_button.get_attribute("class")
            
            if not is_saved:
                self.logger.info("ูู ูุชู ุญูุธ ุงูููุฏูู ุจุงููุนู")
                return True
            
            # ุงูููุฑ ุนูู ุฒุฑ ุงูุญูุธ ูุฅูุบุงุก ุงูุญูุธ
            save_button.click()
            self._random_wait()
            
            self.logger.info("ุชู ุฅูุบุงุก ุญูุธ ุงูููุฏูู ุจูุฌุงุญ")
            return True
        except Exception as e:
            self.logger.error(f"ุฎุทุฃ ูู ุฅูุบุงุก ุญูุธ ุงูููุฏูู: {str(e)}")
            return False
    
    def follow_user(self, username=None, profile_url=None):
        """
        ูุชุงุจุนุฉ ูุณุชุฎุฏู
        
        ุงููุนููุงุช:
            username (str, optional): ุงุณู ุงููุณุชุฎุฏู
            profile_url (str, optional): ุฑุงุจุท ุงูููู ุงูุดุฎุตู. ุฅุฐุง ูุงู Noneุ ุณูุชู ุงุณุชุฎุฏุงู ุงูุตูุญุฉ ุงูุญุงููุฉ
            
        ุงูุนูุงุฆุฏ:
            bool: True ุฅุฐุง ุชูุช ุงููุชุงุจุนุฉ ุจูุฌุงุญุ False ุฎูุงู ุฐูู
        """
        if not self.driver:
            self.logger.error("ูู ูุชู ุชุนููู ูุชุตูุญ Selenium")
            return False
        
        try:
            # ุงูุงูุชูุงู ุฅูู ุตูุญุฉ ุงูููู ุงูุดุฎุตู ุฅุฐุง ุชู ุชุญุฏูุฏ ุฑุงุจุท
            if profile_url:
                self.driver.get(profile_url)
                self._random_wait(3, 5)
            elif username:
                self.driver.get(f"https://www.tiktok.com/@{username}")
                self._random_wait(3, 5)
            
            # ุงูุจุญุซ ุนู ุฒุฑ ุงููุชุงุจุนุฉ
            follow_button = None
            
            # ูุญุงููุฉ ุงูุนุซูุฑ ุนูู ุฒุฑ ุงููุชุงุจุนุฉ ุจุงุณุชุฎุฏุงู ุนุฏุฉ ุทุฑู
            selectors = [
                (By.XPATH, "//button[contains(text(), 'Follow')]"),
                (By.XPATH, "//button[contains(@data-e2e, 'follow-button')]"),
                (By.XPATH, "//button[contains(@class, 'follow-button')]")
            ]
            
            for by, selector in selectors:
                follow_button = self._wait_and_find_element(by, selector)
                if follow_button:
                    break
            
            if not follow_button:
                self.logger.error("ูู ูุชู ุงูุนุซูุฑ ุนูู ุฒุฑ ุงููุชุงุจุนุฉ")
                return False
            
            # ุงูุชุญูู ููุง ุฅุฐุง ูุงู ุชู ุงููุชุงุจุนุฉ ุจุงููุนู
            is_following = "Following" in follow_button.text or "Unfollow" in follow_button.text
            
            if is_following:
                self.logger.info("ุชูุช ูุชุงุจุนุฉ ุงููุณุชุฎุฏู ุจุงููุนู")
                return True
            
            # ุงูููุฑ ุนูู ุฒุฑ ุงููุชุงุจุนุฉ
            follow_button.click()
            self._random_wait()
            
            self.logger.info(f"ุชูุช ูุชุงุจุนุฉ ุงููุณุชุฎุฏู ุจูุฌุงุญ: {username or profile_url}")
            return True
        except Exception as e:
            self.logger.error(f"ุฎุทุฃ ูู ูุชุงุจุนุฉ ุงููุณุชุฎุฏู: {str(e)}")
            return False
    
    def unfollow_user(self, username=None, profile_url=None):
        """
        ุฅูุบุงุก ูุชุงุจุนุฉ ูุณุชุฎุฏู
        
        ุงููุนููุงุช:
            username (str, optional): ุงุณู ุงููุณุชุฎุฏู
            profile_url (str, optional): ุฑุงุจุท ุงูููู ุงูุดุฎุตู. ุฅุฐุง ูุงู Noneุ ุณูุชู ุงุณุชุฎุฏุงู ุงูุตูุญุฉ ุงูุญุงููุฉ
            
        ุงูุนูุงุฆุฏ:
            bool: True ุฅุฐุง ุชู ุฅูุบุงุก ุงููุชุงุจุนุฉ ุจูุฌุงุญุ False ุฎูุงู ุฐูู
        """
        if not self.driver:
            self.logger.error("ูู ูุชู ุชุนููู ูุชุตูุญ Selenium")
            return False
        
        try:
            # ุงูุงูุชูุงู ุฅูู ุตูุญุฉ ุงูููู ุงูุดุฎุตู ุฅุฐุง ุชู ุชุญุฏูุฏ ุฑุงุจุท
            if profile_url:
                self.driver.get(profile_url)
                self._random_wait(3, 5)
            elif username:
                self.driver.get(f"https://www.tiktok.com/@{username}")
                self._random_wait(3, 5)
            
            # ุงูุจุญุซ ุนู ุฒุฑ ุงููุชุงุจุนุฉ
            follow_button = None
            
            # ูุญุงููุฉ ุงูุนุซูุฑ ุนูู ุฒุฑ ุงููุชุงุจุนุฉ ุจุงุณุชุฎุฏุงู ุนุฏุฉ ุทุฑู
            selectors = [
                (By.XPATH, "//button[contains(text(), 'Following')]"),
                (By.XPATH, "//button[contains(text(), 'Unfollow')]"),
                (By.XPATH, "//button[contains(@data-e2e, 'follow-button')]"),
                (By.XPATH, "//button[contains(@class, 'follow-button')]")
            ]
            
            for by, selector in selectors:
                follow_button = self._wait_and_find_element(by, selector)
                if follow_button:
                    break
            
            if not follow_button:
                self.logger.error("ูู ูุชู ุงูุนุซูุฑ ุนูู ุฒุฑ ุงููุชุงุจุนุฉ")
                return False
            
            # ุงูุชุญูู ููุง ุฅุฐุง ูุงู ุชู ุงููุชุงุจุนุฉ ุจุงููุนู
            is_following = "Following" in follow_button.text or "Unfollow" in follow_button.text
            
            if not is_following:
                self.logger.info("ูู ุชุชู ูุชุงุจุนุฉ ุงููุณุชุฎุฏู ุจุงููุนู")
                return True
            
            # ุงูููุฑ ุนูู ุฒุฑ ุงููุชุงุจุนุฉ ูุฅูุบุงุก ุงููุชุงุจุนุฉ
            follow_button.click()
            self._random_wait()
            
            # ุชุฃููุฏ ุฅูุบุงุก ุงููุชุงุจุนุฉ ุฅุฐุง ุธูุฑ ูุฑุจุน ุญูุงุฑ
            confirm_button = self._wait_and_find_element(By.XPATH, "//button[contains(text(), 'Unfollow')]", 3)
            if confirm_button:
                confirm_button.click()
                self._random_wait()
            
            self.logger.info(f"ุชู ุฅูุบุงุก ูุชุงุจุนุฉ ุงููุณุชุฎุฏู ุจูุฌุงุญ: {username or profile_url}")
            return True
        except Exception as e:
            self.logger.error(f"ุฎุทุฃ ูู ุฅูุบุงุก ูุชุงุจุนุฉ ุงููุณุชุฎุฏู: {str(e)}")
            return False
    
    def perform_random_engagement(self, video_url=None):
        """
        ุชูููุฐ ุชูุงุนู ุนุดูุงุฆู
        
        ุงููุนููุงุช:
            video_url (str, optional): ุฑุงุจุท ุงูููุฏูู. ุฅุฐุง ูุงู Noneุ ุณูุชู ุงุณุชุฎุฏุงู ุงูุตูุญุฉ ุงูุญุงููุฉ
            
        ุงูุนูุงุฆุฏ:
            dict: ูุชุงุฆุฌ ุงูุชูุงุนู
        """
        if not self.driver:
            self.logger.error("ูู ูุชู ุชุนููู ูุชุตูุญ Selenium")
            return {"success": False, "actions": []}
        
        try:
            # ุงูุงูุชูุงู ุฅูู ุตูุญุฉ ุงูููุฏูู ุฅุฐุง ุชู ุชุญุฏูุฏ ุฑุงุจุท
            if video_url:
                self.driver.get(video_url)
                self._random_wait(3, 5)
            
            # ุชุญุฏูุฏ ุงูุฅุฌุฑุงุกุงุช ุงูุนุดูุงุฆูุฉ
            actions = []
            results = {"success": True, "actions": []}
            
            # ุงูุฅุนุฌุงุจ ุจุงูููุฏูู (ุงุญุชูุงููุฉ 80%)
            if random.random() < 0.8:
                like_result = self.like_video()
                actions.append({"action": "like", "success": like_result})
            
            # ุงูุชุนููู ุนูู ุงูููุฏูู (ุงุญุชูุงููุฉ 30%)
            if random.random() < 0.3:
                comment_result = self.comment_on_video()
                actions.append({"action": "comment", "success": comment_result})
            
            # ูุดุงุฑูุฉ ุงูููุฏูู (ุงุญุชูุงููุฉ 20%)
            if random.random() < 0.2:
                share_result = self.share_video()
                actions.append({"action": "share", "success": share_result})
            
            # ุญูุธ ุงูููุฏูู (ุงุญุชูุงููุฉ 40%)
            if random.random() < 0.4:
                save_result = self.save_video()
                actions.append({"action": "save", "success": save_result})
            
            # ูุชุงุจุนุฉ ุงููุณุชุฎุฏู (ุงุญุชูุงููุฉ 10%)
            if random.random() < 0.1:
                follow_result = self.follow_user()
                actions.append({"action": "follow", "success": follow_result})
            
            results["actions"] = actions
            
            self.logger.info(f"ุชู ุชูููุฐ ุชูุงุนู ุนุดูุงุฆู: {actions}")
            return results
        except Exception as e:
            self.logger.error(f"ุฎุทุฃ ูู ุชูููุฐ ุชูุงุนู ุนุดูุงุฆู: {str(e)}")
            return {"success": False, "actions": []}
    
    def add_comment(self, category, comment):
        """
        ุฅุถุงูุฉ ุชุนููู ุฅูู ูุงุฆูุฉ ุงูุชุนูููุงุช
        
        ุงููุนููุงุช:
            category (str): ูุฆุฉ ุงูุชุนููู
            comment (str): ูุต ุงูุชุนููู
            
        ุงูุนูุงุฆุฏ:
            bool: True ุฅุฐุง ุชูุช ุงูุฅุถุงูุฉ ุจูุฌุงุญุ False ุฎูุงู ุฐูู
        """
        try:
            if category not in self.comments:
                self.comments[category] = []
            
            self.comments[category].append(comment)
            
            with open(self.comments_file, 'w', encoding='utf-8') as f:
                json.dump(self.comments, f, ensure_ascii=False, indent=2)
            
            return True
        except Exception as e:
            self.logger.error(f"ุฎุทุฃ ูู ุฅุถุงูุฉ ุชุนููู: {str(e)}")
            return False
    
    def remove_comment(self, category, comment):
        """
        ุฅุฒุงูุฉ ุชุนููู ูู ูุงุฆูุฉ ุงูุชุนูููุงุช
        
        ุงููุนููุงุช:
            category (str): ูุฆุฉ ุงูุชุนููู
            comment (str): ูุต ุงูุชุนููู
            
        ุงูุนูุงุฆุฏ:
            bool: True ุฅุฐุง ุชูุช ุงูุฅุฒุงูุฉ ุจูุฌุงุญุ False ุฎูุงู ุฐูู
        """
        try:
            if category not in self.comments:
                return False
            
            if comment not in self.comments[category]:
                return False
            
            self.comments[category].remove(comment)
            
            with open(self.comments_file, 'w', encoding='utf-8') as f:
                json.dump(self.comments, f, ensure_ascii=False, indent=2)
            
            return True
        except Exception as e:
            self.logger.error(f"ุฎุทุฃ ูู ุฅุฒุงูุฉ ุชุนููู: {str(e)}")
            return False
    
    def get_comments(self, category=None):
        """
        ุงูุญุตูู ุนูู ุงูุชุนูููุงุช
        
        ุงููุนููุงุช:
            category (str, optional): ูุฆุฉ ุงูุชุนููู
            
        ุงูุนูุงุฆุฏ:
            dict or list: ุงูุชุนูููุงุช
        """
        if category:
            if category in self.comments:
                return self.comments[category]
            return []
        
        return self.comments
